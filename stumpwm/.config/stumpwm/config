; -*-lisp-*-
; vim:fileencoding=utf-8:filetype=lisp
;;;; StumpWM configuration file.
;;;; reminder: eval `(loadrc)` to reload configs
(in-package :stumpwm)

;;; Loading contrib modules
;; https://github.com/stumpwm/stumpwm/wiki/Modules#contrib-repository
;; https://github.com/stumpwm/stumpwm-contrib
(load-module "cpu")
(load-module "spatial-groups")

;;; Custom utilities
(defcommand toggle-bar () ()
  "Toggle mode-line on and off"
  (toggle-mode-line (current-screen) (current-head)))

(defun display-volume-info ()
  "Print the current volume info, i.e., if mute, left, and right volumes"
  (let* ((raw-output (run-shell-command "pactl list sinks" t))
         (mute-value (nth-value 1 (cl-ppcre:scan-to-strings
                                   "Mute: ([a-z]+)"
                                   raw-output)))
         (mute-p (string= (svref mute-value 0) "yes"))
         (vol-values (nth-value 1 (cl-ppcre:scan-to-strings
                                   "Volume: .+/\\s+(\\d+).+/.+/\\s+(\\d+).+/"
                                   raw-output)))
         (vol-l (parse-integer (svref vol-values 0)))
         (vol-r (parse-integer (svref vol-values 1)))
         (*record-last-msg-override* t))
    (message "Volume: ~:[~;(MUTE) ~]~d%, ~d%" mute-p vol-l vol-r)))

(defcommand volume- () ()
  "Decrease volume by 5%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ -5%" t)
  (display-volume-info))

(defcommand volume-- () ()
  "Decrease volume by 25%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ -25%" t)
  (display-volume-info))

(defcommand volume+ () ()
  "Increase volume by 5%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ +5%" t)
  (display-volume-info))

(defcommand volume++ () ()
  "Increase volume by 25%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ +25%" t)
  (display-volume-info))

(defcommand toggle-mute () ()
  "Toggle mute on/off"
  (run-shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle" t)
  (display-volume-info))

(defun display-brightness-message ()
  "Get the integer part of the brightness value"
  (message "Brightness: ~a~%" (run-shell-command "xbacklight -get | cut -d . -f 1" t)))

(defcommand brightness- () ()
  "Decrease the monitor's brightness by 10%"
  (let ((*record-last-msg-override* t))
    (run-shell-command "xbacklight -dec 10" t)
    (display-brightness-message)))

(defcommand brightness+ () ()
  "Increase the monitor's brightness by 10%"
  (let ((*record-last-msg-override* t))
    (run-shell-command "xbacklight -inc 10" t)
    (display-brightness-message)))

(defcommand prompt-poweroff () ()
  "Prompt the user to confirm powering off"
  (if (y-or-n-p "Power off? ")
      (run-shell-command "poweroff")
      (xlib:unmap-window (screen-message-window (current-screen)))))

(defcommand prompt-reboot () ()
  "Prompt the user to confirm rebooting"
  (if (y-or-n-p "Reboot? ")
      (run-shell-command "reboot")
      (xlib:unmap-window (screen-message-window (current-screen)))))

;;; General behaviour
;; Display the keybindings window when pressing pressing prefix
(add-hook *key-press-hook* 'which-key-mode-key-press-hook)

;; Reorder after destroying windows
(add-hook *destroy-window-hook* #'(lambda (win) (repack-window-numbers)))

;;; Visual and colours
;;                 dark     bright1   bright2    white
(setf *colors* `("#170420" "#ea1646" "#870d2c" "#ddfafa"))
(setf *default-bg-color* (first *colors*))

(set-border-color (fourth *colors*))
(set-focus-color (second *colors*))
(set-unfocus-color (first *colors*))
(set-float-focus-color (second *colors*))
(set-float-unfocus-color (third *colors*))
(setf *normal-border-width* 1)
(setf *transient-border-width* 1)

;; Set wallpaper if it exists
(let ((fpath (probe-file "~/.config/wallpaper")))
  (if fpath (run-shell-command (format nil "xwallpaper --zoom ~s" (namestring fpath)))))

;; Font configuration - use `xfontsel` to query available configurations
(or (set-font "-*-terminus-medium-r-normal-*-14-*-*-*-*-*-*-*")
    (set-font "9x15bold"))

;;; Configuring mode-line (the status bar)
(setf *window-format* "%m%n%s%c")

;; Datetime format
;;  <day-of-week>, <day> <month> <year> - <hour>:<minutes>
(setf *time-modeline-string* "%a, %d %B %Y - %R")

;; Elements to display
;;   <group-name> <group-windows> <right-align> <cpu> " | " <date>
(setf *screen-mode-line-format*
      (list "[^B%n^b]" "%W" "^>" "%C" " | " "%d"))

;; Colours
(setf *mode-line-background-color* (first *colors*))
(setf *mode-line-foreground-color* (second *colors*))
(setf *mode-line-border-color* (first *colors*))
(setf *mode-line-border-width* 0)
(setf *mode-line-position* :bottom)

;; The number of seconds between updates
(setf *mode-line-timeout* 10)

;; Enable mode-line after configuring it
(enable-mode-line (current-screen) (current-head) t)

;;; Keybindings
;; Make Super+Space the prefix
(set-prefix-key (kbd "s-SPC"))

;; Change focus on mouse click
(setf *mouse-focus-policy* :click)

;; Toggle mode-line/statusbar
(define-key *root-map* (kbd "t") "toggle-bar")

;; Run programs
(define-key *root-map* (kbd "Menu") "exec dmenu_run_xres")
(define-key *top-map* (kbd "s-RET") "exec st")

;; Volume controls
(define-key *top-map* (kbd "XF86AudioLowerVolume") "volume-")
(define-key *top-map* (kbd "S-XF86AudioLowerVolume") "volume--")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume+")
(define-key *top-map* (kbd "S-XF86AudioRaiseVolume") "volume++")
(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute")

;; Screen brightness controls
(define-key *top-map* (kbd "XF86MonBrightnessDown") "brightness-")
(define-key *top-map* (kbd "XF86MonBrightnessUp") "brightness+")

;; Lock screen, reboot, and poweroff
(define-key *root-map* (kbd "s-l") "exec xset s activate")
(define-key *root-map* (kbd "s-r") "prompt-reboot")
(define-key *root-map* (kbd "s-p") "prompt-poweroff")

;; Capture screenshot
(define-key *top-map* (kbd "SunPrint_Screen") "exec flameshot screen -p ~/Pictures/screenshots")
(define-key *top-map* (kbd "Sys_Req") "exec flameshot gui")

;; Group and window navigation
(define-key *top-map* (kbd "s-N") "gnext")
(define-key *top-map* (kbd "s-P") "gprev")
(define-key *top-map* (kbd "s-n") "next-in-frame")
(define-key *top-map* (kbd "s-p") "prev-in-frame")
(define-key *top-map* (kbd "s-M-n") "next")
(define-key *top-map* (kbd "s-M-p") "prev")
(define-key *top-map* (kbd "s-TAB") "other-window")
(define-key *top-map* (kbd "s-ISO_Left_Tab") "gother")

;;; Spatial groups keybindings
;; Move between splits in the current group
(define-key *groups-map* (kbd "S-Left") "move-focus left")
(define-key *groups-map* (kbd "S-Down") "move-focus down")
(define-key *groups-map* (kbd "S-Up") "move-focus up")
(define-key *groups-map* (kbd "S-Right") "move-focus right")

;; Move between groups in the current desktop
(define-key *groups-map* (kbd "Left") "coord-left")
(define-key *groups-map* (kbd "Down") "coord-down")
(define-key *groups-map* (kbd "Up") "coord-up")
(define-key *groups-map* (kbd "Right") "coord-right")

;; Move betwen desktops
(define-key *groups-map* (kbd "p") "coord-taskleft")
(define-key *groups-map* (kbd "n") "coord-taskright")

;; Jump to the current desktop's origin group (x: 0, y: 0)
(define-key *groups-map* (kbd "c") "coord-taskorigin")

;; Jump to the last visited group
(define-key *groups-map* (kbd "TAB") "coord-taskpop")
