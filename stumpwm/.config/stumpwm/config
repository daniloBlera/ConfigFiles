; -*-lisp-*-
;;;; StumpWM configuration file.
;;;; reminder: eval `(loadrc)` to reload configs

;; Warning: we're using the stumpwm namespace to avoid using its prefix
(in-package :stumpwm)
(setf *defaul-package* :stumpwm)

;; Loading contrib modules
(load-module "cpu")

;;; Custom utilities
(defcommand toggle-bar () ()
  "Toggle mode-line on and off"
  (toggle-mode-line (current-screen) (current-head)))

(defcommand which-key-mode-on () ()
  "Enable key press hook"
  (unless (find 'which-key-mode-key-press-hook *key-press-hook*)
    (add-hook *key-press-hook* 'which-key-mode-key-press-hook)))

(defcommand which-key-mode-off () ()
  "Disable key press hook"
  (when (find 'which-key-mode-key-press-hook *key-press-hook*)
    (remove-hook *key-press-hook* 'which-key-mode-key-press-hook)))

(defun display-volume-info ()
  "Print the current volume info, i.e., if mute, left, and right volumes"
  (let* ((raw-output (run-shell-command "pactl list sinks" t))
         (mute-value (nth-value 1 (cl-ppcre:scan-to-strings "Mute: ([a-z]+)" raw-output)))
         (mute-p (string= (svref mute-value 0) "yes"))
         (vol-values (nth-value 1 (cl-ppcre:scan-to-strings "Volume: .+/\\s+(\\d+).+/.+/\\s+(\\d+).+/" raw-output)))
         (vol-l (parse-integer (svref vol-values 0)))
         (vol-r (parse-integer (svref vol-values 1)))
         (*record-last-msg-override* t))
    (format t "~s, ~s, ~s~%" mute-p vol-l vol-r)
    (message "Vol: ~:[~;(MUTE) ~]~d%, ~d%" mute-p vol-l vol-r)))

(defcommand volume- () ()
  "Decrease volume by 5%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ -5%")
  (display-volume-info))

(defcommand volume-- () ()
  "Decrease volume by 25%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ -25%")
  (display-volume-info))

(defcommand volume+ () ()
  "Increase volume by 5%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ +5%")
  (display-volume-info))

(defcommand volume++ () ()
  "Increase volume by 25%"
  (run-shell-command "pactl set-sink-volume @DEFAULT_SINK@ +25%")
  (display-volume-info))

(defcommand toggle-mute () ()
  "Toggle mute on/off"
  (run-shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle")
  (display-volume-info))

(defcommand prompt-poweroff () ()
  "Prompt the user to confirm powering off"
  (if (y-or-n-p (format nil "Power off? "))
      (run-shell-command "poweroff")
      (xlib:unmap-window (screen-message-window (current-screen)))))

(defcommand prompt-reboot () ()
  "Prompt the user to confirm rebooting"
  (if (y-or-n-p (format nil "Reboot? "))
      (run-shell-command "reboot")
      (xlib:unmap-window (screen-message-window (current-screen)))))

;;; General behaviour
;; Display the keybindings window when pressing pressing prefix
(which-key-mode-on)

;;; Visual and colours
;;                 dark     bright1   bright2    white
(setf *colors* `("#170420" "#ea1646" "#870d2c" "#ddfafa"))
(defvar *default-bg-color* (first *colors*))

(set-border-color (fourth *colors*))
(set-focus-color (second *colors*))
(set-unfocus-color (first *colors*))
(set-float-focus-color (second *colors*))
(set-float-unfocus-color (third *colors*))

;; Set wallpaper if it exists
(let ((fpath (probe-file "~/.config/wallpaper")))
  (if fpath (run-shell-command (format nil "xwallpaper --zoom ~s" (namestring fpath)))))

;; Font configuration - you can use `xfontsel` to query font configurations
(or (set-font "-*-unifont-medium-r-*-*-16-*-*-*-*-*-*-*")
    (set-font "9x15bold"))

;;; Configuring mode-line (also known as "status bar")
(setf *window-format* "%m%n%s%c")

;; Datetime format
(setf *time-modeline-string* "%a, %d %B %Y - %R")

;; Elements to display
;;   <group-name> <group-windows> <right-align> <cpu> " | " <date>
(setf *screen-mode-line-format*
      (list "[^B%n^b]" "%W" "^>" "%C" " | " "%d"))

;; Colours
(setf *mode-line-background-color* (first *colors*))
(setf *mode-line-foreground-color* (second *colors*))
(setf *mode-line-border-color* (first *colors*))
(setf *mode-line-border-width* 0)
(setf *mode-line-position* :bottom)

;; The number of seconds between updates
(setf *mode-line-timeout* 10)

;; And remember to enable mode-line *after* configuring it
(enable-mode-line (current-screen) (current-head) t)

;;; Keybindings
;; Change focus on mouse click
(setf *mouse-focus-policy* :click)

;; Make Super+Space the prefix
(set-prefix-key (kbd "s-SPC"))

;; Toggle mode-line/statusbar
(define-key *root-map* (kbd "t") "toggle-bar")

;; Open terminal
(define-key *top-map* (kbd "s-RET") "exec st")

;; Volume controls
(define-key *top-map* (kbd "XF86AudioLowerVolume") "volume-")
(define-key *top-map* (kbd "S-XF86AudioLowerVolume") "volume--")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume+")
(define-key *top-map* (kbd "S-XF86AudioRaiseVolume") "volume++")
(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute")
(define-key *top-map* (kbd "s-Menu") "exec dmenu_run_xres")

;; Lock screen, reboot, poweroff and logoff
(define-key *root-map* (kbd "Pause") "exec lockscreen-cmd")
(define-key *root-map* (kbd "s-r") "prompt-reboot")
(define-key *root-map* (kbd "s-ESC") "prompt-poweroff")

;; Group and window navigation
(define-key *top-map* (kbd "s-N") "gnext")
(define-key *top-map* (kbd "s-P") "gprev")
(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *top-map* (kbd "s-p") "pull-hidden-previous")
(define-key *top-map* (kbd "s-TAB") "other-window")

;; Renumber windows
(define-key *root-map* (kbd "Delete") "repack-window-numbers")

;; Take screenshot
(define-key *top-map* (kbd "SunPrint_Screen") "exec capture-screenshot")
(define-key *top-map* (kbd "Sys_Req") "exec capture-screenshot -s")
